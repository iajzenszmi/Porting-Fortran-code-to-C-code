ian@ian-Latitude-E7440:~$ gfortran allo.f08 -ffree-form
f951: Error: Cannot open file ‘allo.f08’
<built-in>: Fatal Error: cannot open input file: allo.f08
compilation terminated.
ian@ian-Latitude-E7440:~$ ls allo*
ls: cannot access 'allo*': No such file or directory
ian@ian-Latitude-E7440:~$ cd Downloads
ian@ian-Latitude-E7440:~/Downloads$ ls allo*
allo2.c  allo.c            allocatetetest.f08  allo.f08
allo3.c  allocatetest.f08  allo.f
ian@ian-Latitude-E7440:~/Downloads$ gfortran allo.f08 -ffree-form
ian@ian-Latitude-E7440:~/Downloads$ ./a.out
 xi                87588       94047354331808  blank COMMON
 xj                87588       94047354331200  labeled COMMON jj
 A                131059      140723844715904  local stack array
 B1               131003      140664448741392  Allocated heap array
 B2               130999      140660153770000  Allocated heap array
 x                131059      140723844715772  local stack variable
ian@ian-Latitude-E7440:~/Downloads$ gcc allo3.c
allo3.c: In function ‘report_memory’:
allo3.c:50:32: warning: format ‘%lld’ expects argument of type ‘long long int’, but argument 4 has type ‘intptr_t’ {aka ‘long int’} [-Wformat=]
   50 |     printf("%-3s %-11lld %-18lld %s\n", variable_name, variable_loc / SIZE_GBYTE, variable_loc, description);
      |                          ~~~~~~^                                                  ~~~~~~~~~~~~
      |                                |                                                  |
      |                                long long int                                      intptr_t {aka long int}
      |                          %-18ld
ian@ian-Latitude-E7440:~/Downloads$ ./a.out
xi  88299       94811281608768     blank COMMON
xj  88299       94811281609376     labeled COMMON jj
A   131056      140720718797152    local stack array
B1  130627      140260273025040    Allocated heap array
B2  130623      140255978053648    Allocated heap array
x   131056      140720718797132    local stack variable
ian@ian-Latitude-E7440:~/Downloads$ cat allo3.c
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#define SIZE_XI 3
#define SIZE_H 144
#define SIZE_A 10
#define SIZE_GBYTE (1LL << 30)

// Global variables to simulate COMMON blocks in Fortran
float xi[SIZE_XI], h[SIZE_H];
float xj[SIZE_XI], hj[SIZE_H];

// Function prototypes
void f(int n, float A[]);
void report_memory(const char *variable_name, intptr_t variable_loc, const char *description);

int main() {
    float A[SIZE_A] = {0};
    float *B1, *B2;
    float x = 0;

    // Allocating memory for B1 and B2
    B1 = (float *)malloc(SIZE_GBYTE * sizeof(float));
    B2 = (float *)malloc(SIZE_GBYTE * sizeof(float));

    // Report memory locations
    report_memory("xi", (intptr_t)xi, "blank COMMON");
    report_memory("xj", (intptr_t)xj, "labeled COMMON jj");
    report_memory("A ", (intptr_t)A, "local stack array");
    report_memory("B1", (intptr_t)B1, "Allocated heap array");
    report_memory("B2", (intptr_t)B2, "Allocated heap array");
    report_memory("x ", (intptr_t)&x, "local stack variable");

    // Call to function f
    f(SIZE_A, A);

    // Cleanup
    free(B1);
    free(B2);

    return 0;
}

void f(int n, float A[]) {
    A[n - 1] = 1;
}

void report_memory(const char *variable_name, intptr_t variable_loc, const char *description) {
    printf("%-3s %-11lld %-18lld %s\n", variable_name, variable_loc / SIZE_GBYTE, variable_loc, description);
}
ian@ian-Latitude-E7440:~/Downloads$ cat allo.f08
program array_test

  common xi,h
  common /jj/ xj,hj
  real xi(3),h(144),xj(3),hj(144)

  real :: A(10), x
  real, allocatable :: B1(:), B2(:)
  integer*8 :: gbyte = 2**30

  allocate ( B1(gbyte) )
  allocate ( B2(gbyte) )

  call report_memory ( 'xi', loc(xi), ' blank COMMON' )
  call report_memory ( 'xj', loc(xj), ' labeled COMMON jj' )
  call report_memory ( 'A ', loc(A), ' local stack array' )
  call report_memory ( 'B1', loc(B1), ' Allocated heap array' )
  call report_memory ( 'B2', loc(B2), ' Allocated heap array' )
  call report_memory ( 'x ', loc(x), ' local stack variable' )

  A = 0

 contains

    subroutine f(n, A)
     integer :: n
     real, intent(inout) :: A(n)
     A(n) = 1
    end subroutine

    subroutine report_memory ( variable_name, variable_loc, description )
     character*(*) :: variable_name, description
     integer*8 :: variable_loc, gb_address
     integer*8 :: gbyte = 2**30

     gb_address = variable_loc / gbyte
     write (*,*) variable_name, gb_address, variable_loc, description

    end subroutine report_memory 
    
end program
